Iterator in Java

Ein Iterator ist ein Objekt, das eine Möglichkeit bietet, Elemente einer Sammlung (Collection) sequenziell zu durchlaufen, ohne die interne Implementierung der Sammlung preiszugeben.

Eigenschaften:
	•	Bietet Methoden wie hasNext(), next(), und remove().
	•	Wird durch die Methode iterator() der Collection-Schnittstelle bereitgestellt.
	•	Einmaliger Durchlauf: Ein Iterator kann nicht zurückgehen oder mehrfach durchlaufen werden.

Beispiel:

import java.util.ArrayList;
import java.util.Iterator;

public class IteratorExample {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("A");
        list.add("B");
        list.add("C");

        Iterator<String> iterator = list.iterator();
        while (iterator.hasNext()) {
            System.out.println(iterator.next());
        }
    }
}

ListIterator in Java

Ein ListIterator erweitert die Funktionalität des Iterator. Es wird speziell für List-Implementierungen wie ArrayList und LinkedList verwendet und bietet bidirektionale Traversierung sowie zusätzliche Methoden.

Eigenschaften:
	•	Kann sowohl vorwärts als auch rückwärts traversieren.
	•	Bietet Methoden wie hasPrevious(), previous(), add(), und set().
	•	Erhältlich durch die Methode listIterator().

Beispiel:

import java.util.ArrayList;
import java.util.ListIterator;

public class ListIteratorExample {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("A");
        list.add("B");
        list.add("C");

        ListIterator<String> listIterator = list.listIterator();

        System.out.println("Vorwärts:");
        while (listIterator.hasNext()) {
            System.out.println(listIterator.next());
        }

        System.out.println("Rückwärts:");
        while (listIterator.hasPrevious()) {
            System.out.println(listIterator.previous());
        }
    }
}

Vergleich:

Feature	                    Iterator	ListIterator
Vorwärts Traversieren	        Ja	        Ja
Rückwärts Traversieren	        Nein	    Ja
Hinzufügen von Elementen	    Nein	    Ja
Ersetzen von Elementen	        Nein	    Ja